// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_storage_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_storage_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_storage_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_storage_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_5fservice_2eproto;
namespace storage_service {
class GetLatestPageRequest;
class GetLatestPageRequestDefaultTypeInternal;
extern GetLatestPageRequestDefaultTypeInternal _GetLatestPageRequest_default_instance_;
class GetLatestPageRequest_PageID;
class GetLatestPageRequest_PageIDDefaultTypeInternal;
extern GetLatestPageRequest_PageIDDefaultTypeInternal _GetLatestPageRequest_PageID_default_instance_;
class GetLatestPageResponse;
class GetLatestPageResponseDefaultTypeInternal;
extern GetLatestPageResponseDefaultTypeInternal _GetLatestPageResponse_default_instance_;
class GetOldPageRequest;
class GetOldPageRequestDefaultTypeInternal;
extern GetOldPageRequestDefaultTypeInternal _GetOldPageRequest_default_instance_;
class GetOldPageRequest_PageID;
class GetOldPageRequest_PageIDDefaultTypeInternal;
extern GetOldPageRequest_PageIDDefaultTypeInternal _GetOldPageRequest_PageID_default_instance_;
class GetOldPageResponse;
class GetOldPageResponseDefaultTypeInternal;
extern GetOldPageResponseDefaultTypeInternal _GetOldPageResponse_default_instance_;
class GetPersistLsnRequest;
class GetPersistLsnRequestDefaultTypeInternal;
extern GetPersistLsnRequestDefaultTypeInternal _GetPersistLsnRequest_default_instance_;
class GetPersistLsnResponse;
class GetPersistLsnResponseDefaultTypeInternal;
extern GetPersistLsnResponseDefaultTypeInternal _GetPersistLsnResponse_default_instance_;
class LogWriteRequest;
class LogWriteRequestDefaultTypeInternal;
extern LogWriteRequestDefaultTypeInternal _LogWriteRequest_default_instance_;
class LogWriteResponse;
class LogWriteResponseDefaultTypeInternal;
extern LogWriteResponseDefaultTypeInternal _LogWriteResponse_default_instance_;
}  // namespace storage_service
PROTOBUF_NAMESPACE_OPEN
template<> ::storage_service::GetLatestPageRequest* Arena::CreateMaybeMessage<::storage_service::GetLatestPageRequest>(Arena*);
template<> ::storage_service::GetLatestPageRequest_PageID* Arena::CreateMaybeMessage<::storage_service::GetLatestPageRequest_PageID>(Arena*);
template<> ::storage_service::GetLatestPageResponse* Arena::CreateMaybeMessage<::storage_service::GetLatestPageResponse>(Arena*);
template<> ::storage_service::GetOldPageRequest* Arena::CreateMaybeMessage<::storage_service::GetOldPageRequest>(Arena*);
template<> ::storage_service::GetOldPageRequest_PageID* Arena::CreateMaybeMessage<::storage_service::GetOldPageRequest_PageID>(Arena*);
template<> ::storage_service::GetOldPageResponse* Arena::CreateMaybeMessage<::storage_service::GetOldPageResponse>(Arena*);
template<> ::storage_service::GetPersistLsnRequest* Arena::CreateMaybeMessage<::storage_service::GetPersistLsnRequest>(Arena*);
template<> ::storage_service::GetPersistLsnResponse* Arena::CreateMaybeMessage<::storage_service::GetPersistLsnResponse>(Arena*);
template<> ::storage_service::LogWriteRequest* Arena::CreateMaybeMessage<::storage_service::LogWriteRequest>(Arena*);
template<> ::storage_service::LogWriteResponse* Arena::CreateMaybeMessage<::storage_service::LogWriteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace storage_service {

// ===================================================================

class LogWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.LogWriteRequest) */ {
 public:
  inline LogWriteRequest() : LogWriteRequest(nullptr) {};
  virtual ~LogWriteRequest();

  LogWriteRequest(const LogWriteRequest& from);
  LogWriteRequest(LogWriteRequest&& from) noexcept
    : LogWriteRequest() {
    *this = ::std::move(from);
  }

  inline LogWriteRequest& operator=(const LogWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogWriteRequest& operator=(LogWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogWriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogWriteRequest* internal_default_instance() {
    return reinterpret_cast<const LogWriteRequest*>(
               &_LogWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogWriteRequest& a, LogWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogWriteRequest* New() const final {
    return CreateMaybeMessage<LogWriteRequest>(nullptr);
  }

  LogWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogWriteRequest& from);
  void MergeFrom(const LogWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.LogWriteRequest";
  }
  protected:
  explicit LogWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 1,
  };
  // bytes log = 1;
  void clear_log();
  const std::string& log() const;
  void set_log(const std::string& value);
  void set_log(std::string&& value);
  void set_log(const char* value);
  void set_log(const void* value, size_t size);
  std::string* mutable_log();
  std::string* release_log();
  void set_allocated_log(std::string* log);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_log();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_log(
      std::string* log);
  private:
  const std::string& _internal_log() const;
  void _internal_set_log(const std::string& value);
  std::string* _internal_mutable_log();
  public:

  // @@protoc_insertion_point(class_scope:storage_service.LogWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LogWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.LogWriteResponse) */ {
 public:
  inline LogWriteResponse() : LogWriteResponse(nullptr) {};
  virtual ~LogWriteResponse();

  LogWriteResponse(const LogWriteResponse& from);
  LogWriteResponse(LogWriteResponse&& from) noexcept
    : LogWriteResponse() {
    *this = ::std::move(from);
  }

  inline LogWriteResponse& operator=(const LogWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogWriteResponse& operator=(LogWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogWriteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogWriteResponse* internal_default_instance() {
    return reinterpret_cast<const LogWriteResponse*>(
               &_LogWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogWriteResponse& a, LogWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogWriteResponse* New() const final {
    return CreateMaybeMessage<LogWriteResponse>(nullptr);
  }

  LogWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogWriteResponse& from);
  void MergeFrom(const LogWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.LogWriteResponse";
  }
  protected:
  explicit LogWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:storage_service.LogWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLatestPageRequest_PageID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetLatestPageRequest.PageID) */ {
 public:
  inline GetLatestPageRequest_PageID() : GetLatestPageRequest_PageID(nullptr) {};
  virtual ~GetLatestPageRequest_PageID();

  GetLatestPageRequest_PageID(const GetLatestPageRequest_PageID& from);
  GetLatestPageRequest_PageID(GetLatestPageRequest_PageID&& from) noexcept
    : GetLatestPageRequest_PageID() {
    *this = ::std::move(from);
  }

  inline GetLatestPageRequest_PageID& operator=(const GetLatestPageRequest_PageID& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestPageRequest_PageID& operator=(GetLatestPageRequest_PageID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLatestPageRequest_PageID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLatestPageRequest_PageID* internal_default_instance() {
    return reinterpret_cast<const GetLatestPageRequest_PageID*>(
               &_GetLatestPageRequest_PageID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetLatestPageRequest_PageID& a, GetLatestPageRequest_PageID& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestPageRequest_PageID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestPageRequest_PageID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLatestPageRequest_PageID* New() const final {
    return CreateMaybeMessage<GetLatestPageRequest_PageID>(nullptr);
  }

  GetLatestPageRequest_PageID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLatestPageRequest_PageID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLatestPageRequest_PageID& from);
  void MergeFrom(const GetLatestPageRequest_PageID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestPageRequest_PageID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetLatestPageRequest.PageID";
  }
  protected:
  explicit GetLatestPageRequest_PageID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kSliceIdFieldNumber = 2,
    kPageNoFieldNumber = 3,
  };
  // sint32 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 slice_id = 2;
  void clear_slice_id();
  ::PROTOBUF_NAMESPACE_ID::int32 slice_id() const;
  void set_slice_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slice_id() const;
  void _internal_set_slice_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 page_no = 3;
  void clear_page_no();
  ::PROTOBUF_NAMESPACE_ID::int32 page_no() const;
  void set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_no() const;
  void _internal_set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:storage_service.GetLatestPageRequest.PageID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 slice_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLatestPageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetLatestPageRequest) */ {
 public:
  inline GetLatestPageRequest() : GetLatestPageRequest(nullptr) {};
  virtual ~GetLatestPageRequest();

  GetLatestPageRequest(const GetLatestPageRequest& from);
  GetLatestPageRequest(GetLatestPageRequest&& from) noexcept
    : GetLatestPageRequest() {
    *this = ::std::move(from);
  }

  inline GetLatestPageRequest& operator=(const GetLatestPageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestPageRequest& operator=(GetLatestPageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLatestPageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLatestPageRequest* internal_default_instance() {
    return reinterpret_cast<const GetLatestPageRequest*>(
               &_GetLatestPageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetLatestPageRequest& a, GetLatestPageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestPageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestPageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLatestPageRequest* New() const final {
    return CreateMaybeMessage<GetLatestPageRequest>(nullptr);
  }

  GetLatestPageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLatestPageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLatestPageRequest& from);
  void MergeFrom(const GetLatestPageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestPageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetLatestPageRequest";
  }
  protected:
  explicit GetLatestPageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetLatestPageRequest_PageID PageID;

  // accessors -------------------------------------------------------

  enum : int {
    kPageIdFieldNumber = 1,
    kLatestLsnFieldNumber = 2,
  };
  // repeated .storage_service.GetLatestPageRequest.PageID page_id = 1;
  int page_id_size() const;
  private:
  int _internal_page_id_size() const;
  public:
  void clear_page_id();
  ::storage_service::GetLatestPageRequest_PageID* mutable_page_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetLatestPageRequest_PageID >*
      mutable_page_id();
  private:
  const ::storage_service::GetLatestPageRequest_PageID& _internal_page_id(int index) const;
  ::storage_service::GetLatestPageRequest_PageID* _internal_add_page_id();
  public:
  const ::storage_service::GetLatestPageRequest_PageID& page_id(int index) const;
  ::storage_service::GetLatestPageRequest_PageID* add_page_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetLatestPageRequest_PageID >&
      page_id() const;

  // repeated sint32 latest_lsn = 2;
  int latest_lsn_size() const;
  private:
  int _internal_latest_lsn_size() const;
  public:
  void clear_latest_lsn();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_latest_lsn(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_latest_lsn() const;
  void _internal_add_latest_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_latest_lsn();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 latest_lsn(int index) const;
  void set_latest_lsn(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_latest_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      latest_lsn() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_latest_lsn();

  // @@protoc_insertion_point(class_scope:storage_service.GetLatestPageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetLatestPageRequest_PageID > page_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > latest_lsn_;
  mutable std::atomic<int> _latest_lsn_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLatestPageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetLatestPageResponse) */ {
 public:
  inline GetLatestPageResponse() : GetLatestPageResponse(nullptr) {};
  virtual ~GetLatestPageResponse();

  GetLatestPageResponse(const GetLatestPageResponse& from);
  GetLatestPageResponse(GetLatestPageResponse&& from) noexcept
    : GetLatestPageResponse() {
    *this = ::std::move(from);
  }

  inline GetLatestPageResponse& operator=(const GetLatestPageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestPageResponse& operator=(GetLatestPageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLatestPageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLatestPageResponse* internal_default_instance() {
    return reinterpret_cast<const GetLatestPageResponse*>(
               &_GetLatestPageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetLatestPageResponse& a, GetLatestPageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestPageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestPageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLatestPageResponse* New() const final {
    return CreateMaybeMessage<GetLatestPageResponse>(nullptr);
  }

  GetLatestPageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLatestPageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLatestPageResponse& from);
  void MergeFrom(const GetLatestPageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestPageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetLatestPageResponse";
  }
  protected:
  explicit GetLatestPageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated bytes data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:storage_service.GetLatestPageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOldPageRequest_PageID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetOldPageRequest.PageID) */ {
 public:
  inline GetOldPageRequest_PageID() : GetOldPageRequest_PageID(nullptr) {};
  virtual ~GetOldPageRequest_PageID();

  GetOldPageRequest_PageID(const GetOldPageRequest_PageID& from);
  GetOldPageRequest_PageID(GetOldPageRequest_PageID&& from) noexcept
    : GetOldPageRequest_PageID() {
    *this = ::std::move(from);
  }

  inline GetOldPageRequest_PageID& operator=(const GetOldPageRequest_PageID& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOldPageRequest_PageID& operator=(GetOldPageRequest_PageID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOldPageRequest_PageID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOldPageRequest_PageID* internal_default_instance() {
    return reinterpret_cast<const GetOldPageRequest_PageID*>(
               &_GetOldPageRequest_PageID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetOldPageRequest_PageID& a, GetOldPageRequest_PageID& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOldPageRequest_PageID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOldPageRequest_PageID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOldPageRequest_PageID* New() const final {
    return CreateMaybeMessage<GetOldPageRequest_PageID>(nullptr);
  }

  GetOldPageRequest_PageID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOldPageRequest_PageID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOldPageRequest_PageID& from);
  void MergeFrom(const GetOldPageRequest_PageID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOldPageRequest_PageID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetOldPageRequest.PageID";
  }
  protected:
  explicit GetOldPageRequest_PageID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kSliceIdFieldNumber = 2,
    kPageNoFieldNumber = 3,
  };
  // sint32 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 slice_id = 2;
  void clear_slice_id();
  ::PROTOBUF_NAMESPACE_ID::int32 slice_id() const;
  void set_slice_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slice_id() const;
  void _internal_set_slice_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 page_no = 3;
  void clear_page_no();
  ::PROTOBUF_NAMESPACE_ID::int32 page_no() const;
  void set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_no() const;
  void _internal_set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:storage_service.GetOldPageRequest.PageID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 slice_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOldPageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetOldPageRequest) */ {
 public:
  inline GetOldPageRequest() : GetOldPageRequest(nullptr) {};
  virtual ~GetOldPageRequest();

  GetOldPageRequest(const GetOldPageRequest& from);
  GetOldPageRequest(GetOldPageRequest&& from) noexcept
    : GetOldPageRequest() {
    *this = ::std::move(from);
  }

  inline GetOldPageRequest& operator=(const GetOldPageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOldPageRequest& operator=(GetOldPageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOldPageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOldPageRequest* internal_default_instance() {
    return reinterpret_cast<const GetOldPageRequest*>(
               &_GetOldPageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetOldPageRequest& a, GetOldPageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOldPageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOldPageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOldPageRequest* New() const final {
    return CreateMaybeMessage<GetOldPageRequest>(nullptr);
  }

  GetOldPageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOldPageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOldPageRequest& from);
  void MergeFrom(const GetOldPageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOldPageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetOldPageRequest";
  }
  protected:
  explicit GetOldPageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetOldPageRequest_PageID PageID;

  // accessors -------------------------------------------------------

  enum : int {
    kPageIdFieldNumber = 1,
    kActiveTrxIdsFieldNumber = 2,
    kUpLimitIdFieldNumber = 3,
    kLowLimitIdFieldNumber = 4,
  };
  // repeated .storage_service.GetOldPageRequest.PageID page_id = 1;
  int page_id_size() const;
  private:
  int _internal_page_id_size() const;
  public:
  void clear_page_id();
  ::storage_service::GetOldPageRequest_PageID* mutable_page_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetOldPageRequest_PageID >*
      mutable_page_id();
  private:
  const ::storage_service::GetOldPageRequest_PageID& _internal_page_id(int index) const;
  ::storage_service::GetOldPageRequest_PageID* _internal_add_page_id();
  public:
  const ::storage_service::GetOldPageRequest_PageID& page_id(int index) const;
  ::storage_service::GetOldPageRequest_PageID* add_page_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetOldPageRequest_PageID >&
      page_id() const;

  // repeated sint32 active_trx_ids = 2;
  int active_trx_ids_size() const;
  private:
  int _internal_active_trx_ids_size() const;
  public:
  void clear_active_trx_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active_trx_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_active_trx_ids() const;
  void _internal_add_active_trx_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_active_trx_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 active_trx_ids(int index) const;
  void set_active_trx_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_active_trx_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      active_trx_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_active_trx_ids();

  // sint32 up_limit_id = 3;
  void clear_up_limit_id();
  ::PROTOBUF_NAMESPACE_ID::int32 up_limit_id() const;
  void set_up_limit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_up_limit_id() const;
  void _internal_set_up_limit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 low_limit_id = 4;
  void clear_low_limit_id();
  ::PROTOBUF_NAMESPACE_ID::int32 low_limit_id() const;
  void set_low_limit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_low_limit_id() const;
  void _internal_set_low_limit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:storage_service.GetOldPageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetOldPageRequest_PageID > page_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > active_trx_ids_;
  mutable std::atomic<int> _active_trx_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 up_limit_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 low_limit_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOldPageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetOldPageResponse) */ {
 public:
  inline GetOldPageResponse() : GetOldPageResponse(nullptr) {};
  virtual ~GetOldPageResponse();

  GetOldPageResponse(const GetOldPageResponse& from);
  GetOldPageResponse(GetOldPageResponse&& from) noexcept
    : GetOldPageResponse() {
    *this = ::std::move(from);
  }

  inline GetOldPageResponse& operator=(const GetOldPageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOldPageResponse& operator=(GetOldPageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOldPageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOldPageResponse* internal_default_instance() {
    return reinterpret_cast<const GetOldPageResponse*>(
               &_GetOldPageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetOldPageResponse& a, GetOldPageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOldPageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOldPageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOldPageResponse* New() const final {
    return CreateMaybeMessage<GetOldPageResponse>(nullptr);
  }

  GetOldPageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOldPageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOldPageResponse& from);
  void MergeFrom(const GetOldPageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOldPageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetOldPageResponse";
  }
  protected:
  explicit GetOldPageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated bytes data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:storage_service.GetOldPageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPersistLsnRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetPersistLsnRequest) */ {
 public:
  inline GetPersistLsnRequest() : GetPersistLsnRequest(nullptr) {};
  virtual ~GetPersistLsnRequest();

  GetPersistLsnRequest(const GetPersistLsnRequest& from);
  GetPersistLsnRequest(GetPersistLsnRequest&& from) noexcept
    : GetPersistLsnRequest() {
    *this = ::std::move(from);
  }

  inline GetPersistLsnRequest& operator=(const GetPersistLsnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersistLsnRequest& operator=(GetPersistLsnRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPersistLsnRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPersistLsnRequest* internal_default_instance() {
    return reinterpret_cast<const GetPersistLsnRequest*>(
               &_GetPersistLsnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetPersistLsnRequest& a, GetPersistLsnRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersistLsnRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersistLsnRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPersistLsnRequest* New() const final {
    return CreateMaybeMessage<GetPersistLsnRequest>(nullptr);
  }

  GetPersistLsnRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPersistLsnRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPersistLsnRequest& from);
  void MergeFrom(const GetPersistLsnRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersistLsnRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetPersistLsnRequest";
  }
  protected:
  explicit GetPersistLsnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:storage_service.GetPersistLsnRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPersistLsnResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetPersistLsnResponse) */ {
 public:
  inline GetPersistLsnResponse() : GetPersistLsnResponse(nullptr) {};
  virtual ~GetPersistLsnResponse();

  GetPersistLsnResponse(const GetPersistLsnResponse& from);
  GetPersistLsnResponse(GetPersistLsnResponse&& from) noexcept
    : GetPersistLsnResponse() {
    *this = ::std::move(from);
  }

  inline GetPersistLsnResponse& operator=(const GetPersistLsnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersistLsnResponse& operator=(GetPersistLsnResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPersistLsnResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPersistLsnResponse* internal_default_instance() {
    return reinterpret_cast<const GetPersistLsnResponse*>(
               &_GetPersistLsnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetPersistLsnResponse& a, GetPersistLsnResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersistLsnResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersistLsnResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPersistLsnResponse* New() const final {
    return CreateMaybeMessage<GetPersistLsnResponse>(nullptr);
  }

  GetPersistLsnResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPersistLsnResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPersistLsnResponse& from);
  void MergeFrom(const GetPersistLsnResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersistLsnResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetPersistLsnResponse";
  }
  protected:
  explicit GetPersistLsnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersistLsnFieldNumber = 1,
  };
  // sint32 persist_lsn = 1;
  void clear_persist_lsn();
  ::PROTOBUF_NAMESPACE_ID::int32 persist_lsn() const;
  void set_persist_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_persist_lsn() const;
  void _internal_set_persist_lsn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:storage_service.GetPersistLsnResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 persist_lsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// ===================================================================

class StorageService_Stub;

class StorageService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline StorageService() {};
 public:
  virtual ~StorageService();

  typedef StorageService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void LogWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::LogWriteRequest* request,
                       ::storage_service::LogWriteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetOldPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::GetOldPageRequest* request,
                       ::storage_service::GetOldPageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLatestPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::GetLatestPageRequest* request,
                       ::storage_service::GetLatestPageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPersistLsn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::GetPersistLsnRequest* request,
                       ::storage_service::GetPersistLsnResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StorageService);
};

class StorageService_Stub : public StorageService {
 public:
  StorageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  StorageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~StorageService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements StorageService ------------------------------------------

  void LogWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::LogWriteRequest* request,
                       ::storage_service::LogWriteResponse* response,
                       ::google::protobuf::Closure* done);
  void GetOldPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::GetOldPageRequest* request,
                       ::storage_service::GetOldPageResponse* response,
                       ::google::protobuf::Closure* done);
  void GetLatestPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::GetLatestPageRequest* request,
                       ::storage_service::GetLatestPageResponse* response,
                       ::google::protobuf::Closure* done);
  void GetPersistLsn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::GetPersistLsnRequest* request,
                       ::storage_service::GetPersistLsnResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StorageService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogWriteRequest

// bytes log = 1;
inline void LogWriteRequest::clear_log() {
  log_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogWriteRequest::log() const {
  // @@protoc_insertion_point(field_get:storage_service.LogWriteRequest.log)
  return _internal_log();
}
inline void LogWriteRequest::set_log(const std::string& value) {
  _internal_set_log(value);
  // @@protoc_insertion_point(field_set:storage_service.LogWriteRequest.log)
}
inline std::string* LogWriteRequest::mutable_log() {
  // @@protoc_insertion_point(field_mutable:storage_service.LogWriteRequest.log)
  return _internal_mutable_log();
}
inline const std::string& LogWriteRequest::_internal_log() const {
  return log_.Get();
}
inline void LogWriteRequest::_internal_set_log(const std::string& value) {
  
  log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogWriteRequest::set_log(std::string&& value) {
  
  log_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:storage_service.LogWriteRequest.log)
}
inline void LogWriteRequest::set_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:storage_service.LogWriteRequest.log)
}
inline void LogWriteRequest::set_log(const void* value,
    size_t size) {
  
  log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:storage_service.LogWriteRequest.log)
}
inline std::string* LogWriteRequest::_internal_mutable_log() {
  
  return log_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogWriteRequest::release_log() {
  // @@protoc_insertion_point(field_release:storage_service.LogWriteRequest.log)
  return log_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogWriteRequest::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    
  } else {
    
  }
  log_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:storage_service.LogWriteRequest.log)
}
inline std::string* LogWriteRequest::unsafe_arena_release_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:storage_service.LogWriteRequest.log)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return log_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogWriteRequest::unsafe_arena_set_allocated_log(
    std::string* log) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (log != nullptr) {
    
  } else {
    
  }
  log_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      log, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:storage_service.LogWriteRequest.log)
}

// -------------------------------------------------------------------

// LogWriteResponse

// -------------------------------------------------------------------

// GetLatestPageRequest_PageID

// sint32 table_id = 1;
inline void GetLatestPageRequest_PageID::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLatestPageRequest_PageID::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLatestPageRequest_PageID::table_id() const {
  // @@protoc_insertion_point(field_get:storage_service.GetLatestPageRequest.PageID.table_id)
  return _internal_table_id();
}
inline void GetLatestPageRequest_PageID::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void GetLatestPageRequest_PageID::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:storage_service.GetLatestPageRequest.PageID.table_id)
}

// sint32 slice_id = 2;
inline void GetLatestPageRequest_PageID::clear_slice_id() {
  slice_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLatestPageRequest_PageID::_internal_slice_id() const {
  return slice_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLatestPageRequest_PageID::slice_id() const {
  // @@protoc_insertion_point(field_get:storage_service.GetLatestPageRequest.PageID.slice_id)
  return _internal_slice_id();
}
inline void GetLatestPageRequest_PageID::_internal_set_slice_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slice_id_ = value;
}
inline void GetLatestPageRequest_PageID::set_slice_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slice_id(value);
  // @@protoc_insertion_point(field_set:storage_service.GetLatestPageRequest.PageID.slice_id)
}

// sint32 page_no = 3;
inline void GetLatestPageRequest_PageID::clear_page_no() {
  page_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLatestPageRequest_PageID::_internal_page_no() const {
  return page_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLatestPageRequest_PageID::page_no() const {
  // @@protoc_insertion_point(field_get:storage_service.GetLatestPageRequest.PageID.page_no)
  return _internal_page_no();
}
inline void GetLatestPageRequest_PageID::_internal_set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_no_ = value;
}
inline void GetLatestPageRequest_PageID::set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_no(value);
  // @@protoc_insertion_point(field_set:storage_service.GetLatestPageRequest.PageID.page_no)
}

// -------------------------------------------------------------------

// GetLatestPageRequest

// repeated .storage_service.GetLatestPageRequest.PageID page_id = 1;
inline int GetLatestPageRequest::_internal_page_id_size() const {
  return page_id_.size();
}
inline int GetLatestPageRequest::page_id_size() const {
  return _internal_page_id_size();
}
inline void GetLatestPageRequest::clear_page_id() {
  page_id_.Clear();
}
inline ::storage_service::GetLatestPageRequest_PageID* GetLatestPageRequest::mutable_page_id(int index) {
  // @@protoc_insertion_point(field_mutable:storage_service.GetLatestPageRequest.page_id)
  return page_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetLatestPageRequest_PageID >*
GetLatestPageRequest::mutable_page_id() {
  // @@protoc_insertion_point(field_mutable_list:storage_service.GetLatestPageRequest.page_id)
  return &page_id_;
}
inline const ::storage_service::GetLatestPageRequest_PageID& GetLatestPageRequest::_internal_page_id(int index) const {
  return page_id_.Get(index);
}
inline const ::storage_service::GetLatestPageRequest_PageID& GetLatestPageRequest::page_id(int index) const {
  // @@protoc_insertion_point(field_get:storage_service.GetLatestPageRequest.page_id)
  return _internal_page_id(index);
}
inline ::storage_service::GetLatestPageRequest_PageID* GetLatestPageRequest::_internal_add_page_id() {
  return page_id_.Add();
}
inline ::storage_service::GetLatestPageRequest_PageID* GetLatestPageRequest::add_page_id() {
  // @@protoc_insertion_point(field_add:storage_service.GetLatestPageRequest.page_id)
  return _internal_add_page_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetLatestPageRequest_PageID >&
GetLatestPageRequest::page_id() const {
  // @@protoc_insertion_point(field_list:storage_service.GetLatestPageRequest.page_id)
  return page_id_;
}

// repeated sint32 latest_lsn = 2;
inline int GetLatestPageRequest::_internal_latest_lsn_size() const {
  return latest_lsn_.size();
}
inline int GetLatestPageRequest::latest_lsn_size() const {
  return _internal_latest_lsn_size();
}
inline void GetLatestPageRequest::clear_latest_lsn() {
  latest_lsn_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLatestPageRequest::_internal_latest_lsn(int index) const {
  return latest_lsn_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLatestPageRequest::latest_lsn(int index) const {
  // @@protoc_insertion_point(field_get:storage_service.GetLatestPageRequest.latest_lsn)
  return _internal_latest_lsn(index);
}
inline void GetLatestPageRequest::set_latest_lsn(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  latest_lsn_.Set(index, value);
  // @@protoc_insertion_point(field_set:storage_service.GetLatestPageRequest.latest_lsn)
}
inline void GetLatestPageRequest::_internal_add_latest_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  latest_lsn_.Add(value);
}
inline void GetLatestPageRequest::add_latest_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_latest_lsn(value);
  // @@protoc_insertion_point(field_add:storage_service.GetLatestPageRequest.latest_lsn)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetLatestPageRequest::_internal_latest_lsn() const {
  return latest_lsn_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetLatestPageRequest::latest_lsn() const {
  // @@protoc_insertion_point(field_list:storage_service.GetLatestPageRequest.latest_lsn)
  return _internal_latest_lsn();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetLatestPageRequest::_internal_mutable_latest_lsn() {
  return &latest_lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetLatestPageRequest::mutable_latest_lsn() {
  // @@protoc_insertion_point(field_mutable_list:storage_service.GetLatestPageRequest.latest_lsn)
  return _internal_mutable_latest_lsn();
}

// -------------------------------------------------------------------

// GetLatestPageResponse

// repeated bytes data = 1;
inline int GetLatestPageResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetLatestPageResponse::data_size() const {
  return _internal_data_size();
}
inline void GetLatestPageResponse::clear_data() {
  data_.Clear();
}
inline std::string* GetLatestPageResponse::add_data() {
  // @@protoc_insertion_point(field_add_mutable:storage_service.GetLatestPageResponse.data)
  return _internal_add_data();
}
inline const std::string& GetLatestPageResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& GetLatestPageResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:storage_service.GetLatestPageResponse.data)
  return _internal_data(index);
}
inline std::string* GetLatestPageResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:storage_service.GetLatestPageResponse.data)
  return data_.Mutable(index);
}
inline void GetLatestPageResponse::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:storage_service.GetLatestPageResponse.data)
  data_.Mutable(index)->assign(value);
}
inline void GetLatestPageResponse::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:storage_service.GetLatestPageResponse.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void GetLatestPageResponse::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:storage_service.GetLatestPageResponse.data)
}
inline void GetLatestPageResponse::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:storage_service.GetLatestPageResponse.data)
}
inline std::string* GetLatestPageResponse::_internal_add_data() {
  return data_.Add();
}
inline void GetLatestPageResponse::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:storage_service.GetLatestPageResponse.data)
}
inline void GetLatestPageResponse::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:storage_service.GetLatestPageResponse.data)
}
inline void GetLatestPageResponse::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:storage_service.GetLatestPageResponse.data)
}
inline void GetLatestPageResponse::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:storage_service.GetLatestPageResponse.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetLatestPageResponse::data() const {
  // @@protoc_insertion_point(field_list:storage_service.GetLatestPageResponse.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetLatestPageResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:storage_service.GetLatestPageResponse.data)
  return &data_;
}

// -------------------------------------------------------------------

// GetOldPageRequest_PageID

// sint32 table_id = 1;
inline void GetOldPageRequest_PageID::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest_PageID::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest_PageID::table_id() const {
  // @@protoc_insertion_point(field_get:storage_service.GetOldPageRequest.PageID.table_id)
  return _internal_table_id();
}
inline void GetOldPageRequest_PageID::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void GetOldPageRequest_PageID::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:storage_service.GetOldPageRequest.PageID.table_id)
}

// sint32 slice_id = 2;
inline void GetOldPageRequest_PageID::clear_slice_id() {
  slice_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest_PageID::_internal_slice_id() const {
  return slice_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest_PageID::slice_id() const {
  // @@protoc_insertion_point(field_get:storage_service.GetOldPageRequest.PageID.slice_id)
  return _internal_slice_id();
}
inline void GetOldPageRequest_PageID::_internal_set_slice_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slice_id_ = value;
}
inline void GetOldPageRequest_PageID::set_slice_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slice_id(value);
  // @@protoc_insertion_point(field_set:storage_service.GetOldPageRequest.PageID.slice_id)
}

// sint32 page_no = 3;
inline void GetOldPageRequest_PageID::clear_page_no() {
  page_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest_PageID::_internal_page_no() const {
  return page_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest_PageID::page_no() const {
  // @@protoc_insertion_point(field_get:storage_service.GetOldPageRequest.PageID.page_no)
  return _internal_page_no();
}
inline void GetOldPageRequest_PageID::_internal_set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_no_ = value;
}
inline void GetOldPageRequest_PageID::set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_no(value);
  // @@protoc_insertion_point(field_set:storage_service.GetOldPageRequest.PageID.page_no)
}

// -------------------------------------------------------------------

// GetOldPageRequest

// repeated .storage_service.GetOldPageRequest.PageID page_id = 1;
inline int GetOldPageRequest::_internal_page_id_size() const {
  return page_id_.size();
}
inline int GetOldPageRequest::page_id_size() const {
  return _internal_page_id_size();
}
inline void GetOldPageRequest::clear_page_id() {
  page_id_.Clear();
}
inline ::storage_service::GetOldPageRequest_PageID* GetOldPageRequest::mutable_page_id(int index) {
  // @@protoc_insertion_point(field_mutable:storage_service.GetOldPageRequest.page_id)
  return page_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetOldPageRequest_PageID >*
GetOldPageRequest::mutable_page_id() {
  // @@protoc_insertion_point(field_mutable_list:storage_service.GetOldPageRequest.page_id)
  return &page_id_;
}
inline const ::storage_service::GetOldPageRequest_PageID& GetOldPageRequest::_internal_page_id(int index) const {
  return page_id_.Get(index);
}
inline const ::storage_service::GetOldPageRequest_PageID& GetOldPageRequest::page_id(int index) const {
  // @@protoc_insertion_point(field_get:storage_service.GetOldPageRequest.page_id)
  return _internal_page_id(index);
}
inline ::storage_service::GetOldPageRequest_PageID* GetOldPageRequest::_internal_add_page_id() {
  return page_id_.Add();
}
inline ::storage_service::GetOldPageRequest_PageID* GetOldPageRequest::add_page_id() {
  // @@protoc_insertion_point(field_add:storage_service.GetOldPageRequest.page_id)
  return _internal_add_page_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetOldPageRequest_PageID >&
GetOldPageRequest::page_id() const {
  // @@protoc_insertion_point(field_list:storage_service.GetOldPageRequest.page_id)
  return page_id_;
}

// repeated sint32 active_trx_ids = 2;
inline int GetOldPageRequest::_internal_active_trx_ids_size() const {
  return active_trx_ids_.size();
}
inline int GetOldPageRequest::active_trx_ids_size() const {
  return _internal_active_trx_ids_size();
}
inline void GetOldPageRequest::clear_active_trx_ids() {
  active_trx_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest::_internal_active_trx_ids(int index) const {
  return active_trx_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest::active_trx_ids(int index) const {
  // @@protoc_insertion_point(field_get:storage_service.GetOldPageRequest.active_trx_ids)
  return _internal_active_trx_ids(index);
}
inline void GetOldPageRequest::set_active_trx_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  active_trx_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:storage_service.GetOldPageRequest.active_trx_ids)
}
inline void GetOldPageRequest::_internal_add_active_trx_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  active_trx_ids_.Add(value);
}
inline void GetOldPageRequest::add_active_trx_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_active_trx_ids(value);
  // @@protoc_insertion_point(field_add:storage_service.GetOldPageRequest.active_trx_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetOldPageRequest::_internal_active_trx_ids() const {
  return active_trx_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetOldPageRequest::active_trx_ids() const {
  // @@protoc_insertion_point(field_list:storage_service.GetOldPageRequest.active_trx_ids)
  return _internal_active_trx_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetOldPageRequest::_internal_mutable_active_trx_ids() {
  return &active_trx_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetOldPageRequest::mutable_active_trx_ids() {
  // @@protoc_insertion_point(field_mutable_list:storage_service.GetOldPageRequest.active_trx_ids)
  return _internal_mutable_active_trx_ids();
}

// sint32 up_limit_id = 3;
inline void GetOldPageRequest::clear_up_limit_id() {
  up_limit_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest::_internal_up_limit_id() const {
  return up_limit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest::up_limit_id() const {
  // @@protoc_insertion_point(field_get:storage_service.GetOldPageRequest.up_limit_id)
  return _internal_up_limit_id();
}
inline void GetOldPageRequest::_internal_set_up_limit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  up_limit_id_ = value;
}
inline void GetOldPageRequest::set_up_limit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_up_limit_id(value);
  // @@protoc_insertion_point(field_set:storage_service.GetOldPageRequest.up_limit_id)
}

// sint32 low_limit_id = 4;
inline void GetOldPageRequest::clear_low_limit_id() {
  low_limit_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest::_internal_low_limit_id() const {
  return low_limit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOldPageRequest::low_limit_id() const {
  // @@protoc_insertion_point(field_get:storage_service.GetOldPageRequest.low_limit_id)
  return _internal_low_limit_id();
}
inline void GetOldPageRequest::_internal_set_low_limit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  low_limit_id_ = value;
}
inline void GetOldPageRequest::set_low_limit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_low_limit_id(value);
  // @@protoc_insertion_point(field_set:storage_service.GetOldPageRequest.low_limit_id)
}

// -------------------------------------------------------------------

// GetOldPageResponse

// repeated bytes data = 1;
inline int GetOldPageResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetOldPageResponse::data_size() const {
  return _internal_data_size();
}
inline void GetOldPageResponse::clear_data() {
  data_.Clear();
}
inline std::string* GetOldPageResponse::add_data() {
  // @@protoc_insertion_point(field_add_mutable:storage_service.GetOldPageResponse.data)
  return _internal_add_data();
}
inline const std::string& GetOldPageResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& GetOldPageResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:storage_service.GetOldPageResponse.data)
  return _internal_data(index);
}
inline std::string* GetOldPageResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:storage_service.GetOldPageResponse.data)
  return data_.Mutable(index);
}
inline void GetOldPageResponse::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:storage_service.GetOldPageResponse.data)
  data_.Mutable(index)->assign(value);
}
inline void GetOldPageResponse::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:storage_service.GetOldPageResponse.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void GetOldPageResponse::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:storage_service.GetOldPageResponse.data)
}
inline void GetOldPageResponse::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:storage_service.GetOldPageResponse.data)
}
inline std::string* GetOldPageResponse::_internal_add_data() {
  return data_.Add();
}
inline void GetOldPageResponse::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:storage_service.GetOldPageResponse.data)
}
inline void GetOldPageResponse::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:storage_service.GetOldPageResponse.data)
}
inline void GetOldPageResponse::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:storage_service.GetOldPageResponse.data)
}
inline void GetOldPageResponse::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:storage_service.GetOldPageResponse.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetOldPageResponse::data() const {
  // @@protoc_insertion_point(field_list:storage_service.GetOldPageResponse.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetOldPageResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:storage_service.GetOldPageResponse.data)
  return &data_;
}

// -------------------------------------------------------------------

// GetPersistLsnRequest

// -------------------------------------------------------------------

// GetPersistLsnResponse

// sint32 persist_lsn = 1;
inline void GetPersistLsnResponse::clear_persist_lsn() {
  persist_lsn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPersistLsnResponse::_internal_persist_lsn() const {
  return persist_lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPersistLsnResponse::persist_lsn() const {
  // @@protoc_insertion_point(field_get:storage_service.GetPersistLsnResponse.persist_lsn)
  return _internal_persist_lsn();
}
inline void GetPersistLsnResponse::_internal_set_persist_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  persist_lsn_ = value;
}
inline void GetPersistLsnResponse::set_persist_lsn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_persist_lsn(value);
  // @@protoc_insertion_point(field_set:storage_service.GetPersistLsnResponse.persist_lsn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace storage_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_storage_5fservice_2eproto
